{
  "permissions": {
    "allow": [
      "Bash(git mv:*)",
      "Bash(mv:*)",
      "Bash(git add:*)",
      "Bash(test:*)",
      "Bash(python -m py_compile:*)",
      "Bash(find:*)",
      "Bash(uv run:*)",
      "Bash(python -m app.main:*)",
      "Bash(python -m uvicorn:*)",
      "Bash(git reset:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: プロジェクト全体のセットアップと構成\n\n- Claude Code エージェント、コマンド、設定の追加\n- WSL2/Docker セットアップガイドの整備\n- プロジェクト構造とドキュメントの再構成\n- セキュリティ機能の強化（セキュリティヘッダー、認証、データ保護）\n- API構造の改善（v1 バージョニング、システムルート分離）\n- テスト構成とデータベーステストパターンの改善\n- サンプルモデル・リポジトリ・サービスの追加\n- 環境設定の整理（local/staging/production）\n- Serena AI メモリーとプロジェクト設定の追加\n- Linter/Formatter設定とマークダウンリンター追加\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: プロジェクト全体のセットアップと構成\n\n- Claude Code エージェント、コマンド、設定の追加\n- WSL2/Docker セットアップガイドの整備\n- プロジェクト構造とドキュメントの再構成\n- セキュリティ機能の強化（セキュリティヘッダー、認証、データ保護）\n- API構造の改善（v1 バージョニング、システムルート分離）\n- テスト構成とデータベーステストパターンの改善\n- サンプルモデル・リポジトリ・サービスの追加\n- 環境設定の整理（local/staging/production）\n- Serena AI メモリーとプロジェクト設定の追加\n- Linter/Formatter設定とマークダウンリンター追加\n- Pydantic v2 ConfigDict移行とテスト実装（76テスト）\n- bcrypt互換性修正とセキュリティ強化\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(tree:*)",
      "Bash(xargs:*)",
      "Bash(git rm:*)",
      "Bash(dir /B \"C:\\developments\\camp_backend\\docs\")",
      "Bash(python -m pytest:*)",
      "Bash(wsl --list:*)",
      "Bash(wsl:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(done)",
      "Bash(git push)",
      "Bash(git push:*)",
      "Bash(powershell.exe:*)",
      "Bash(dir /B \"C:\\developments\\project\\camp_backend\")",
      "Read(//c/developments/**)",
      "Bash(timeout 10 uv run python:*)",
      "Bash(echo:*)",
      "Bash(python:*)",
      "Bash(cat:*)",
      "Bash(set DATABASE_URL=)",
      "Bash(do echo \"=== $model ===\")",
      "Bash(dir \"C:\\developments\\genai-app-docs\\src\\app\\api\" /b)",
      "Bash(pytest:*)",
      "Bash(source .venv/Scripts/activate)",
      "Read(//c/tmp/**)",
      "Bash(.venv/Scripts/python.exe -m pytest:*)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(timeout 60 .venv/Scripts/python.exe -m pytest:*)",
      "Bash(ruff check:*)",
      "Bash(uv pip install:*)",
      "Bash(py -m mypy:*)",
      "Bash(/c/Python312/python.exe -m mypy:*)",
      "Bash(python3 -m mypy:*)",
      "Bash(awk:*)",
      "Bash(sort:*)",
      "Bash(uv pip list:*)",
      "WebSearch",
      "Bash(uv pip uninstall:*)",
      "Bash(curl:*)",
      "Bash(uv pip show:*)",
      "Bash(pip show:*)",
      "Bash(py -m pytest tests/app/services/test_user.py -v)",
      "Bash(/c/Users/nomura.koshiro/AppData/Local/Microsoft/WindowsApps/python -m pytest:*)",
      "Bash(powershell -Command \"cd C:\\developments\\genai-app-docs; python -m pytest tests/app/core/test_config.py -v\")",
      "Bash(where:*)",
      "Bash(/c/Users/nomura.koshiro/AppData/Local/Microsoft/WindowsApps/python3 -m pytest:*)",
      "Bash(py:*)",
      "Bash(python3 -m pytest:*)",
      "Bash(python3:*)",
      "Bash(do echo \"Processing: $file\")",
      "Bash(perl -i -p0e:*)",
      "Bash(powershell -ExecutionPolicy Bypass -File scripts/start-postgres.ps1)",
      "Bash(pg_ctl:*)",
      "Bash(Get-Process postgres -ErrorAction SilentlyContinue)",
      "Bash(powershell -Command \"Get-Process postgres -ErrorAction SilentlyContinue\")",
      "Bash(powershell -ExecutionPolicy Bypass -File scripts/reset-environment.ps1)",
      "Bash(powershell -ExecutionPolicy Bypass -File scripts/setup-windows.ps1)",
      "Bash(powershell -ExecutionPolicy Bypass -File scripts/reset-database.ps1)",
      "Bash(powershell -Command \"Get-Process postgres -ErrorAction SilentlyContinue | Select-Object -First 1\")",
      "Bash(powershell -Command \". scripts/lib/common.ps1; Test-PostgreSQLRunning\")",
      "Bash(powershell -Command:*)",
      "Bash(psql:*)",
      "Bash(powershell -ExecutionPolicy Bypass -File scripts/setup-windows.ps1 -Help)",
      "Bash(do powershell -Command \"Get-Content ''$file'' -Raw | Out-File -Encoding UTF8 ''$file.new''\")",
      "Bash(git branch:*)",
      "Bash(do)",
      "Bash(paste:*)",
      "Bash(handlers.ts.new)",
      "Bash(npm run type-check:*)",
      "Bash(npm run typecheck:*)"
    ],
    "deny": [],
    "ask": []
  }
}
